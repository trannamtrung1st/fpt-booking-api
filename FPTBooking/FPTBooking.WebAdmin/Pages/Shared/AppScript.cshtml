<script>
    function appInit() {
        $.ajaxSetup({
            headers: { 'Authorization': 'Bearer ' + localStorage.access_token }
        });
        checkToken();
    }

    function isDuplicatedUsername(result) {
        return result.code == @((int)AppResultCode.DuplicatedUsername);
    }

    function isFailValidation(result) {
        return result.code == @((int)AppResultCode.FailValidation);
    }

    function changeLoading(isLoading) {
        if (isLoading) {
            $('html').addClass('overflow-hidden');
            $('body').addClass('overflow-hidden');
            $('.modal-loading').show();
        }
        else {
            $('html').removeClass('overflow-hidden');
            $('body').removeClass('overflow-hidden');
            $('.modal-loading').hide();
        }
    }

    function clearToken() {
        localStorage.removeItem('access_token');
        localStorage.removeItem('expires_utc');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('issued_utc');
        localStorage.removeItem('token_type');
    }

    function checkToken() {
        if (localStorage.expires_utc) {
            var curExpStr = localStorage.expires_utc;
            var cur = moment(new Date());
            var exp = moment(new Date(curExpStr));
            var minDiff = exp.diff(cur, 'minutes');
            minDiff = minDiff < 0 ? 0 : minDiff;
            var minRefDiff = minDiff - 5;
            minRefDiff = minRefDiff < 0 ? 0 : minRefDiff;
            console.log('refresh token in ' + minRefDiff + ' mins');

            if (localStorage.refresh_token) {
                setTimeout(() => {
                    if (localStorage.expires_utc == curExpStr) {
                        location.href = "@Routing.LOGOUT";
                    }
                }, minRefDiff * 60 * 1000);
            } else
                setTimeout(() => {
                    location.href = '@Routing.LOGOUT';
                }, minDiff * 60 * 1000);
        }

        function saveToken(data) {
            localStorage.setItem('access_token', data.access_token);
            localStorage.setItem('refresh_token', data.refresh_token);
            localStorage.setItem('issued_utc', data.issued_utc);
            localStorage.setItem('expires_utc', data.expires_utc);
            localStorage.setItem('token_type', data.token_type);
        }
    }

    function confirmAlert(html = 'Are you sure?') {
        return Swal.fire({
            heightAuto: false,
            title: 'Confirm',
            text: html,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes'
        });
    }

    function errorAlert(html = "Something's wrong") {
        return Swal.fire({
            heightAuto: false,
            icon: 'error',
            title: 'Sorry',
            html: html,
        });
    }

    function successAlert(html) {
        return Swal.fire({
            heightAuto: false,
            icon: 'success',
            title: 'Success',
            text: html,
        })
    }

    function sorryAlert(html) {
        return Swal.fire({
            heightAuto: false,
            icon: 'info',
            title: 'Sorry',
            html: html,
        });
    }

    function notFoundAlert(html = "Not found") {
        return Swal.fire({
            heightAuto: false,
            icon: 'info',
            title: 'Sorry',
            html: html,
        });
    }

    function handleGeneralError(resp, notFoundReturn, badReqMessage = null) {
        console.log(resp);
        if (resp.status == 404)
            notFoundAlert().then((result) => {
                if (notFoundReturn) location.href = notFoundReturn;
            });
        else if (resp.status == 400) {
            let html = '';
            let json = resp.responseJSON;
            if (json.code == @((int)AppResultCode.FailValidation)) {
                html = 'Some inputs are not valid';
                let data = json.data;
                for (var i = 0; i < data.length; i++) {
                    var result = data[i];
                    console.log(result);
                }
            } else if (badReqMessage)
                html += badReqMessage(json);
            sorryAlert(html);
        } else
            errorAlert();
    }
</script>